---
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";

import "../styles/editor.css";
import { siteConfig } from "@/config";
const configHue = siteConfig.themeColor.hue;
---

<!doctype html>
<html
  lang="zh-CN"
  class="bg-[var(--page-bg)] transition text-[14px] md:text-[16px]"
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>编辑器 - Cr's Blog</title>

    <!-- Markdown Editor (EasyMDE) -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/easymde/dist/easymde.min.css"
    />
    <script src="https://unpkg.com/easymde/dist/easymde.min.js"></script>

    <!-- YAML Parser (js-yaml) -->
    <script src="https://cdn.jsdelivr.net/npm/js-yaml@4.1.0/dist/js-yaml.min.js"
    ></script>

    <!-- Set the theme before the page is rendered to avoid a flash -->
    <script is:inline>
      // Load the theme from local storage
      const savedTheme = localStorage.getItem("github_editor_theme");
      const systemPrefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;
      const theme = savedTheme || (systemPrefersDark ? "dark" : "light");

      if (theme === "dark") {
        document.documentElement.classList.add("dark");
      }
    </script>

    <style define:vars={{ configHue }}>
      :root {
        --configHue: var(--configHue); /* 注入 configHue 为 CSS 变量 */
      }
    </style>
  </head>
  <body class="min-h-screen transition">
    <div id="app">
      <!-- Login View -->
      <div
        id="login-view"
        class="min-h-screen flex items-center justify-center p-4"
      >
        <div class="max-w-xl w-full card-base card-shadow p-8">
          <h2 class="text-2xl font-bold mb-6 text-90">GitHub 博客编辑器登录</h2>
          <div class="space-y-4">
            <div>
              <label class="block text-75 mb-2">GitHub 用户名</label>
              <input
                id="github-user"
                type="text"
                placeholder="username"
                class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
              />
            </div>
            <div>
              <label class="block text-75 mb-2">GitHub 仓库名</label>
              <input
                id="github-repo"
                type="text"
                placeholder="例如 astro-blog"
                class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
              />
            </div>
            <div>
              <label class="block text-75 mb-2">个人访问令牌 (PAT)</label>
              <input
                id="github-pat"
                type="password"
                placeholder="粘贴您的 PAT"
                class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
              />
            </div>
            <div class="flex justify-end mt-6">
              <button
                id="login-btn"
                class="btn-regular px-6 py-2.5 rounded-lg font-medium flex items-center gap-2"
              >
                <span id="login-spinner" class="hidden">⏳</span>
                登录并加载文件
              </button>
            </div>
            <div id="login-error" class="text-red-500 mt-2 hidden text-sm">
            </div>
          </div>
        </div>
      </div>

      <!-- Main Editor View -->
      <div id="main-view" class="hidden p-4 md:p-8 min-h-screen">
        <div class="flex justify-between items-center mb-6">
          <h1 class="text-3xl font-bold text-90">博客文章编辑器</h1>
          <div class="flex items-center gap-4">
            <!-- Theme Toggle -->
            <button
              id="theme-toggle"
              class="btn-plain w-10 h-10 rounded-lg flex items-center justify-center"
            >
              <svg
                id="theme-icon-light"
                class="w-6 h-6 hidden"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path
                  d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"
                ></path>
              </svg>
              <svg
                id="theme-icon-dark"
                class="w-6 h-6"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 24 24"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M9.528 1.718a.75.75 0 01.162.819A8.97 8.97 0 009 6a9 9 0 009 9 8.97 8.97 0 003.463-.69.75.75 0 01.981.98 10.503 10.503 0 01-9.694 6.46c-5.799 0-10.5-4.701-10.5-10.5 0-4.368 2.667-8.112 6.46-9.694a.75.75 0 01.818.162z"
                  clip-rule="evenodd"></path>
              </svg>
            </button>
            <button
              id="logout-btn"
              class="btn-regular px-4 py-2 rounded-lg text-sm font-medium"
            >
              登出
            </button>
          </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <!-- File List -->
          <div class="lg:col-span-1">
            <div class="card-base card-shadow p-6">
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-90">文章列表</h2>
                <button
                  id="new-file-btn"
                  class="btn-regular px-3 py-1.5 rounded-lg text-sm font-medium"
                >
                  新建
                </button>
              </div>
              <div
                id="file-list-container"
                class="max-h-[calc(100vh-200px)] overflow-y-auto"
              >
                <ul id="file-list" class="space-y-1"></ul>
              </div>
            </div>
          </div>

          <!-- Editor Section -->
          <div id="editor-section" class="lg:col-span-3 hidden">
            <div class="card-base card-shadow p-6">
              <!-- Title and Rename Button -->
              <div class="flex items-center gap-3 mb-6">
                <h2 class="text-2xl font-bold text-90">
                  编辑: <span
                    id="current-file-name"
                    class="font-mono text-[var(--primary)]"></span>
                </h2>
                <button
                  id="rename-file-btn"
                  class="btn-plain px-3 py-1 rounded-md text-sm"
                >
                  重命名
                </button>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
                <div>
                  <label class="block text-75 mb-2 text-sm">标题 (Title)</label>
                  <input
                    id="meta-title"
                    type="text"
                    class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
                  />
                </div>
                <div>
                  <label class="block text-75 mb-2 text-sm"
                    >类别 (Category)</label
                  >
                  <input
                    id="meta-category"
                    type="text"
                    class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
                  />
                </div>
                <div>
                  <label class="block text-75 mb-2 text-sm"
                    >发布日期 (Published)</label
                  >
                  <input
                    id="meta-published"
                    type="date"
                    class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
                  />
                </div>
                <div>
                  <label class="block text-75 mb-2 text-sm"
                    >更新日期 (Updated)</label
                  >
                  <input
                    id="meta-updated"
                    type="date"
                    class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
                  />
                </div>
                <div class="md:col-span-2">
                  <label class="block text-75 mb-2 text-sm"
                    >标签 (Tags, 用英文逗号分隔)</label
                  >
                  <input
                    id="meta-tags"
                    type="text"
                    class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
                  />
                </div>
                <div class="md:col-span-2">
                  <label class="block text-75 mb-2 text-sm"
                    >描述 (Description)</label
                  >
                  <textarea
                    id="meta-description"
                    class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition h-24 resize-none"
                  ></textarea>
                </div>
              </div>
              <div class="editor-container mb-6">
                <textarea id="markdown-editor"></textarea>
              </div>
              <div class="flex justify-between items-center mt-6">
                <button
                  id="delete-file-btn"
                  class="btn-plain px-4 py-2 rounded-lg text-red-500 hover:bg-red-500/10"
                >
                  删除文件
                </button>
                <div class="flex gap-3">
                  <button
                    id="test-output-btn"
                    class="btn-plain px-4 py-2 rounded-lg"
                  >
                    测试输出
                  </button>
                  <button
                    id="save-btn"
                    class="btn-regular px-6 py-2 rounded-lg font-medium flex items-center gap-2"
                  >
                    <span id="save-spinner" class="hidden">⏳</span>
                    保存更改
                  </button>
                </div>
              </div>
              <div id="save-status" class="mt-3 text-right text-sm"></div>
            </div>
          </div>

          <!-- Placeholder -->
          <div
            id="placeholder-section"
            class="lg:col-span-3 flex items-center justify-center"
          >
            <div class="text-center card-base card-shadow p-12">
              <p class="text-xl text-75">
                请从左侧选择一篇文章开始编辑，或新建一篇文章。
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- New File Modal -->
    <div
      id="new-file-modal"
      class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
    >
      <div class="card-base card-shadow p-6 max-w-md w-full">
        <h3 class="font-bold text-lg text-90 mb-4">创建新文件</h3>
        <div class="mb-4">
          <label class="block text-75 mb-2 text-sm"
            >文件名 (例如 my-new-post)</label
          >
          <input
            id="new-filename-input"
            type="text"
            placeholder="请输入文件名"
            class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
          />
          <div id="new-file-error" class="text-red-500 mt-2 text-sm"></div>
        </div>
        <div class="flex justify-end gap-3">
          <button
            id="new-file-cancel-btn"
            class="btn-plain px-4 py-2 rounded-lg">取消</button
          >
          <button
            id="create-file-confirm-btn"
            class="btn-regular px-4 py-2 rounded-lg font-medium"
          >
            创建
          </button>
        </div>
      </div>
    </div>

    <!-- Rename File Modal -->
    <div
      id="rename-file-modal"
      class="hidden fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
    >
      <div class="card-base card-shadow p-6 max-w-md w-full">
        <h3 class="font-bold text-lg text-90 mb-4">重命名文件</h3>
        <div class="mb-4">
          <label class="block text-75 mb-2 text-sm"
            >新文件名 (不含 .md 后缀)</label
          >
          <input
            id="rename-filename-input"
            type="text"
            placeholder="请输入新文件名"
            class="w-full px-4 py-2 rounded-lg bg-[var(--btn-regular-bg)] text-90 border border-transparent focus:border-[var(--primary)] focus:outline-none transition"
          />
          <div id="rename-file-error" class="text-red-500 mt-2 text-sm"></div>
        </div>
        <div class="flex justify-end gap-3">
          <button
            id="rename-file-cancel-btn"
            class="btn-plain px-4 py-2 rounded-lg">取消</button
          >
          <button
            id="rename-file-confirm-btn"
            class="btn-regular px-4 py-2 rounded-lg font-medium"
          >
            确认重命名
          </button>
        </div>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const state = {
          user: "",
          repo: "",
          pat: "",
          currentFile: { path: null, sha: null, isNew: false },
        };

        const ui = {
          loginView: document.getElementById("login-view"),
          mainView: document.getElementById("main-view"),
          loginBtn: document.getElementById("login-btn"),
          loginSpinner: document.getElementById("login-spinner"),
          logoutBtn: document.getElementById("logout-btn"),
          userInput: document.getElementById("github-user"),
          repoInput: document.getElementById("github-repo"),
          patInput: document.getElementById("github-pat"),
          loginError: document.getElementById("login-error"),
          fileList: document.getElementById("file-list"),
          editorSection: document.getElementById("editor-section"),
          placeholderSection: document.getElementById("placeholder-section"),
          currentFileName: document.getElementById("current-file-name"),
          saveBtn: document.getElementById("save-btn"),
          saveSpinner: document.getElementById("save-spinner"),
          saveStatus: document.getElementById("save-status"),
          testOutputBtn: document.getElementById("test-output-btn"),
          deleteFileBtn: document.getElementById("delete-file-btn"), // NEW
          newFileBtn: document.getElementById("new-file-btn"),
          newFileModal: document.getElementById("new-file-modal"),
          newFileInput: document.getElementById("new-filename-input"),
          newFileError: document.getElementById("new-file-error"),
          createFileConfirmBtn: document.getElementById(
            "create-file-confirm-btn"
          ),
          renameFileBtn: document.getElementById("rename-file-btn"), // NEW
          renameFileModal: document.getElementById("rename-file-modal"), // NEW
          renameFileInput: document.getElementById("rename-filename-input"), // NEW
          renameFileError: document.getElementById("rename-file-error"), // NEW
          renameFileConfirmBtn: document.getElementById(
            "rename-file-confirm-btn"
          ), // NEW
          themeToggle: document.getElementById("theme-toggle"),
          meta: {
            title: document.getElementById("meta-title"),
            published: document.getElementById("meta-published"),
            updated: document.getElementById("meta-updated"),
            description: document.getElementById("meta-description"),
            tags: document.getElementById("meta-tags"),
            category: document.getElementById("meta-category"),
          },
        };

        let easyMDE = null;
        let draftInterval = null; // 用于持有定时器的 ID

        // --- 草稿功能函数 ---

        function getDraftKey(path) {
          if (!path) return null;
          return `draft_${state.user}_${state.repo}_${path}`;
        }

        function saveDraft() {
          if (!state.currentFile.path || !easyMDE) return;

          const key = getDraftKey(state.currentFile.path);
          if (!key) return;

          const draft = {
            metadata: {
              title: ui.meta.title.value,
              published: ui.meta.published.value,
              updated: ui.meta.updated.value,
              description: ui.meta.description.value,
              tags: ui.meta.tags.value,
              category: ui.meta.category.value,
            },
            body: easyMDE.value(),
            savedAt: new Date().toISOString(),
          };

          try {
            localStorage.setItem(key, JSON.stringify(draft));
          } catch (e) {
            console.error("保存草稿到 localStorage 时出错:", e);
            showSaveStatus("无法保存草稿，可能是存储空间已满。", true);
          }
        }

        function loadDraft(path) {
          const key = getDraftKey(path);
          if (!key) return;

          const draftString = localStorage.getItem(key);
          if (draftString) {
            try {
              const draft = JSON.parse(draftString);
              const savedDate = new Date(draft.savedAt).toLocaleString();
              if (
                confirm(`发现该文件于 ${savedDate} 保存的草稿。要加载草稿吗？`)
              ) {
                populateEditor(draft.metadata, draft.body);
                showSaveStatus("已从本地加载草稿。", false);
              }
            } catch (e) {
              console.error("加载草稿时出错:", e);
              showSaveStatus("加载草稿失败，草稿数据可能已损坏。", true);
              // 清理损坏的草稿
              localStorage.removeItem(key);
            }
          }
        }

        function clearDraft(path) {
          const key = getDraftKey(path);
          if (key) {
            localStorage.removeItem(key);
          }
        }

        // --- 主题功能 ---
        function applyTheme(theme) {
          const html = document.documentElement;
          const lightIcon = document.getElementById("theme-icon-light");
          const darkIcon = document.getElementById("theme-icon-dark");

          if (theme === "dark") {
            html.classList.add("dark");
            lightIcon?.classList.remove("hidden");
            darkIcon?.classList.add("hidden");
          } else {
            html.classList.remove("dark");
            lightIcon?.classList.add("hidden");
            darkIcon?.classList.remove("hidden");
          }
        }

        function handleThemeToggle() {
          const currentTheme =
            localStorage.getItem("github_editor_theme") || "light";
          const newTheme = currentTheme === "dark" ? "light" : "dark";
          localStorage.setItem("github_editor_theme", newTheme);
          applyTheme(newTheme);
        }

        function loadInitialTheme() {
          const savedTheme = localStorage.getItem("github_editor_theme");
          const systemPrefersDark = window.matchMedia(
            "(prefers-color-scheme: dark)"
          ).matches;
          const theme = savedTheme || (systemPrefersDark ? "dark" : "light");
          applyTheme(theme);
        }

        // --- 工具 & API 函数 ---
        function encodeContent(content) {
          const encoder = new TextEncoder();
          const uint8Array = encoder.encode(content);
          let binaryString = "";
          uint8Array.forEach((byte) => {
            binaryString += String.fromCharCode(byte);
          });
          return btoa(binaryString);
        }

        function decodeContent(base64) {
          const binaryString = atob(base64);
          const bytes = new Uint8Array(binaryString.length);
          for (let i = 0; i < binaryString.length; i++) {
            bytes[i] = binaryString.charCodeAt(i);
          }
          const decoder = new TextDecoder("utf-8");
          return decoder.decode(bytes);
        }

        async function githubApiRequest(endpoint, options = {}) {
          const url = `https://api.github.com/repos/${state.user}/${state.repo}/${endpoint}`;
          const headers = {
            Authorization: `token ${state.pat}`,
            Accept: "application/vnd.github.v3+json",
            ...options.headers,
          };

          try {
            const response = await fetch(url, { ...options, headers });
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(
                errorData.message || `HTTP error! status: ${response.status}`
              );
            }
            if (response.status === 204) {
              // 处理成功的无内容 DELETE 请求
              return { success: true };
            }
            return await response.json();
          } catch (error) {
            console.error("GitHub API 错误:", error);
            throw error;
          }
        }

        async function getFiles() {
          // 假设博客文章位于 src/content/posts
          return githubApiRequest("contents/src/content/posts");
        }
        async function getFileContent(path) {
          const data = await githubApiRequest(`contents/${path}`);
          state.currentFile.sha = data.sha;
          state.currentFile.isNew = false;
          return decodeContent(data.content);
        }
        async function createFile(path, content) {
          return githubApiRequest(`contents/${path}`, {
            method: "PUT",
            body: JSON.stringify({
              message: `docs: create ${path.split("/").pop()}`,
              content: encodeContent(content),
            }),
          });
        }
        async function updateFile(path, content, sha) {
          return githubApiRequest(`contents/${path}`, {
            method: "PUT",
            body: JSON.stringify({
              message: `docs: update ${path.split("/").pop()}`,
              content: encodeContent(content),
              sha,
            }),
          });
        }
        async function deleteFile(path, sha) {
          return githubApiRequest(`contents/${path}`, {
            method: "DELETE",
            body: JSON.stringify({
              message: `docs: delete ${path.split("/").pop()}`,
              sha,
            }),
          });
        }

        // --- 内容处理 ---

        function parseContent(content) {
          const parts = content.split("---");
          if (parts.length < 3) return { metadata: {}, body: content };
          try {
            const metadata = jsyaml.load(parts[1]) || {};
            // 重新组合剩余部分以处理内容中包含 "---" 的情况
            const body = parts.slice(2).join("---").trim();
            return { metadata, body };
          } catch (e) {
            console.error("解析 YAML元数据时出错:", e);
            return { metadata: {}, body: content };
          }
        }

        function stringifyMetadata(metadata) {
          // 创建一个副本进行操作，避免修改原始对象
          const cleanMeta = { ...metadata };

          // 确保 tags 字段总是一个数组
          if (typeof cleanMeta.tags === "string") {
            cleanMeta.tags = cleanMeta.tags
              .split(",")
              .map((tag) => tag.trim())
              .filter(Boolean); // filter(Boolean) 可以移除分割后可能产生的空字符串
          } else if (!Array.isArray(cleanMeta.tags)) {
            cleanMeta.tags = [];
          }

          // 这一段别动 (但是我们修复了其中的 bug)
          // 1. 使用 js-yaml 生成基础的 YAML 字符串
          // 关键修复：必须使用处理过的 cleanMeta 对象！
          const yamlString = jsyaml.dump(cleanMeta, {
            lineWidth: -1,
            noQuotes: true,
            flowLevel: 1, // 这个设置使得 [tag1, tag2] 这样的短数组能保持在同一行
          });

          // 2. 后续处理可以保留，但问题的根源在于上面一步
          const lines = yamlString.split("\n");
          const processedLines = lines.map((line) => {
            if (
              line.startsWith("published:") ||
              line.startsWith("updated:") ||
              line.startsWith("tags:")
            ) {
              // 移除 js-yaml 可能添加的单引号
              return line.replace(/'/g, "");
            }
            return line;
          });

          // 3. 重新组合成最终的字符串
          return processedLines.filter((line) => line).join("\n");
        }

        function populateEditor(metadata, body) {
          ui.meta.title.value = metadata.title || "";
          ui.meta.published.value = metadata.published
            ? new Date(metadata.published).toISOString().split("T")[0]
            : "";
          ui.meta.updated.value = metadata.updated
            ? new Date(metadata.updated).toISOString().split("T")[0]
            : "";
          ui.meta.description.value = metadata.description || "";
          // 将标签数组转换为逗号分隔的字符串以在输入框中显示
          ui.meta.tags.value = Array.isArray(metadata.tags)
            ? metadata.tags.join(", ")
            : metadata.tags || "";
          ui.meta.category.value = metadata.category || "";
          if (easyMDE) easyMDE.value(body);
        }

        function setTodaysDate() {
          const today = new Date().toISOString().split("T")[0];
          ui.meta.published.value = today;
          ui.meta.updated.value = today;
        }

        // --- UI & 状态管理 ---
        function showLoginError(message) {
          ui.loginError.textContent = message;
          ui.loginError.classList.remove("hidden");
        }

        function showSaveStatus(message, isError = false) {
          ui.saveStatus.textContent = message;
          ui.saveStatus.className = isError
            ? "mt-2 text-right text-error"
            : "mt-2 text-right text-success";
          setTimeout(() => (ui.saveStatus.textContent = ""), 5000);
        }

        function resetEditorState() {
          ui.editorSection.classList.add("hidden");
          ui.placeholderSection.classList.remove("hidden");
          state.currentFile = { path: null, sha: null, isNew: false };
          document
            .querySelectorAll("#file-list a")
            .forEach((el) =>
              el.classList.remove(
                "bg-[var(--btn-plain-bg-hover)]",
                "text-[var(--primary)]"
              )
            );
        }

        async function refreshFileList() {
          try {
            renderFileList(await getFiles());
          } catch (error) {
            showSaveStatus("无法刷新文件列表。", true);
          }
        }

        function renderFileList(files) {
          ui.fileList.innerHTML = "";
          const mdFiles = files.filter((file) => file.name.endsWith(".md"));
          if (mdFiles.length === 0) {
            ui.fileList.innerHTML =
              "<li class='text-75 text-sm p-2'>未找到 Markdown 文件</li>";
            return;
          }
          mdFiles.forEach((file) => {
            const a = document.createElement("a");
            a.dataset.path = file.path;
            a.dataset.sha = file.sha;
            a.className =
              "file-item block px-3 py-2 rounded-lg text-90 hover:bg-[var(--btn-plain-bg-hover)] transition cursor-pointer";
            a.href = "#";
            a.textContent = file.name;
            ui.fileList.appendChild(a);

            // 如果这是当前活动文件，则重新选中
            if (state.currentFile.path === file.path) {
              a.classList.add(
                "bg-[var(--btn-plain-bg-hover)]",
                "text-[var(--primary)]"
              );
            }
          });
        }

        // --- 核心动作处理器 ---

        async function handleFileClick(e) {
          const target = e.target.closest("a.file-item");
          if (!target) return;
          e.preventDefault();

          // 在切换前保存当前打开文件的草稿
          saveDraft();

          document.querySelectorAll("#file-list a").forEach((el) => {
            el.classList.remove(
              "bg-[var(--btn-plain-bg-hover)]",
              "text-[var(--primary)]"
            );
          });
          target.classList.add(
            "bg-[var(--btn-plain-bg-hover)]",
            "text-[var(--primary)]"
          );

          state.currentFile.path = target.dataset.path;
          ui.placeholderSection.classList.add("hidden");
          ui.editorSection.classList.remove("hidden");
          ui.currentFileName.textContent = state.currentFile.path
            .split("/")
            .pop();

          try {
            const content = await getFileContent(state.currentFile.path);
            const { metadata, body } = parseContent(content);
            populateEditor(metadata, body);
            if (!metadata.published) setTodaysDate();

            // 在加载原始文件内容后，检查并加载草稿
            loadDraft(state.currentFile.path);
          } catch (error) {
            showSaveStatus(`加载文件失败: ${error.message}`, true);
            resetEditorState(); // 失败时恢复
          }
        }

        async function confirmAndDeleteFile(path, sha) {
          if (state.currentFile.isNew) {
            // 如果是一个未保存的新文件，则只需重置编辑器
            resetEditorState();
            showSaveStatus("新文件编辑已取消。", false);
            return;
          }

          if (
            !confirm(
              `你确定要删除文件 "${path.split("/").pop()}" 吗？此操作无法撤销。`
            )
          )
            return;

          ui.deleteFileBtn.classList.add("btn-disabled");

          try {
            await deleteFile(path, sha);
            showSaveStatus("文件删除成功！", false);
            clearDraft(path); // 删除文件后清除草稿
            if (state.currentFile.path === path) resetEditorState();
            await refreshFileList();
          } catch (error) {
            showSaveStatus(`删除失败: ${error.message}`, true);
          } finally {
            ui.deleteFileBtn.classList.remove("btn-disabled");
          }
        }

        async function handleDeleteButtonClick() {
          if (!state.currentFile.path) {
            showSaveStatus("没有选定文件。", true);
            return;
          }
          // 使用当前状态删除
          await confirmAndDeleteFile(
            state.currentFile.path,
            state.currentFile.sha
          );
        }

        function handleNewFileClick() {
          ui.newFileInput.value = "";
          ui.newFileError.textContent = "";
          ui.newFileModal.classList.remove("hidden");
        }

        function normalizeFilename(name) {
          let filename = name.trim();
          // 格式化文件名：小写，空格/非字母数字（点/连字符除外）转为连字符
          filename = filename
            .toLowerCase()
            .replace(/\s+/g, "-")
            .replace(/[^a-z0-9-.]/g, "");

          // 1. 如果不存在，则添加 .md 后缀
          if (!filename.endsWith(".md")) filename += ".md";
          return filename;
        }

        function handleCreateNewFile() {
          let filename = ui.newFileInput.value.trim();
          if (!filename) {
            ui.newFileError.textContent = "文件名不能为空。";
            return;
          }

          filename = normalizeFilename(filename);

          state.currentFile = {
            path: `src/content/posts/${filename}`,
            sha: null,
            isNew: true,
          };
          ui.currentFileName.textContent = filename;

          // 使用基本模板元数据初始化编辑器
          const templateMeta = {
            title: ui.newFileInput.value.trim(),
            category: "",
            tags: [],
            description: "",
          };
          populateEditor(templateMeta, "在这里写下你的内容...");
          setTodaysDate();

          ui.placeholderSection.classList.add("hidden");
          ui.editorSection.classList.remove("hidden");
          document
            .querySelectorAll("#file-list a")
            .forEach((el) =>
              el.classList.remove(
                "bg-[var(--btn-plain-bg-hover)]",
                "text-[var(--primary)]"
              )
            );
          ui.newFileModal.classList.add("hidden");
        }

        // --- 重命名逻辑 ---

        function handleRenameClick() {
          if (!state.currentFile.path || state.currentFile.isNew) {
            showSaveStatus("请先选择一个已存在的文件进行重命名。", true);
            return;
          }
          // 提取当前文件名，不含路径和 .md 后缀
          const currentName = state.currentFile.path
            .split("/")
            .pop()
            .replace(/\.md$/i, "");
          ui.renameFileInput.value = currentName;
          ui.renameFileError.textContent = "";
          ui.renameFileModal.classList.remove("hidden");
        }

        async function renameFileAction(oldPath, newFilename) {
          if (!state.currentFile.sha) {
            throw new Error("文件操作缺少 SHA。");
          }

          // 1. 捕获当前内容
          const metadata = {
            title: ui.meta.title.value,
            published: ui.meta.published.value,
            updated: ui.meta.updated.value,
            description: ui.meta.description.value,
            tags: ui.meta.tags.value,
            category: ui.meta.category.value,
          };
          const body = easyMDE.value();
          const newContent = `---\n${stringifyMetadata(
            metadata
          )}\n---\n\n${body}`;

          newFilename = newFilename.replace(" ", "-");

          const newPath = `src/content/posts/${newFilename}`;

          // 2. 删除旧文件
          // 注意：我们使用现有的 SHA 进行删除。
          await deleteFile(oldPath, state.currentFile.sha);

          // 3. 创建新文件
          const result = await createFile(newPath, newContent);

          // 4. 更新状态以反映新的文件位置/sha
          state.currentFile.path = newPath;
          state.currentFile.sha = result.content.sha;

          return result;
        }

        async function handleRenameConfirm() {
          const newNameInput = ui.renameFileInput.value.trim();
          if (!newNameInput) {
            ui.renameFileError.textContent = "新文件名不能为空。";
            return;
          }

          const newFilename = normalizeFilename(newNameInput);
          const oldPath = state.currentFile.path;

          if (oldPath.split("/").pop() === newFilename) {
            ui.renameFileError.textContent = "文件名未更改。";
            return;
          }

          ui.renameFileConfirmBtn.classList.add("btn-disabled");
          try {
            await renameFileAction(oldPath, newFilename);
            ui.currentFileName.textContent = newFilename;
            // 清除与旧文件名关联的草稿
            clearDraft(oldPath);
            showSaveStatus("文件重命名成功！", false);
            await refreshFileList();

            ui.renameFileModal.classList.add("hidden");
          } catch (error) {
            showSaveStatus(`重命名失败: ${error.message}`, true);
            ui.renameFileError.textContent = `重命名失败: ${error.message}`;
          } finally {
            ui.renameFileConfirmBtn.classList.remove("btn-disabled");
          }
        }

        // --- 保存处理器 ---

        async function handleSave() {
          if (!state.currentFile.path) {
            showSaveStatus("没有选择要保存的文件。", true);
            return;
          }
          ui.saveSpinner.classList.remove("hidden");
          ui.saveBtn.classList.add("btn-disabled");
          try {
            const metadata = {
              title: ui.meta.title.value,
              published: ui.meta.published.value,
              updated: ui.meta.updated.value,
              description: ui.meta.description.value,
              tags: ui.meta.tags.value,
              category: ui.meta.category.value,
            };
            const body = easyMDE.value();
            // 生成包含 front matter 的完整 markdown 内容
            const newContent = `---\n${stringifyMetadata(
              metadata
            )}\n---\n\n${body}`;

            let result;
            if (state.currentFile.isNew) {
              result = await createFile(state.currentFile.path, newContent);
              await refreshFileList();
            } else {
              result = await updateFile(
                state.currentFile.path,
                newContent,
                state.currentFile.sha
              );
            }

            // 更新 SHA 以备将来操作
            state.currentFile.sha = result.content.sha;
            state.currentFile.isNew = false;
            // 成功保存后清除草稿
            clearDraft(state.currentFile.path);
            showSaveStatus("文件保存成功！", false);
          } catch (error) {
            showSaveStatus(`保存失败: ${error.message}`, true);
          } finally {
            ui.saveSpinner.classList.add("hidden");
            ui.saveBtn.classList.remove("btn-disabled");
          }
        }

        function handleTestOutput() {
          const metadata = {
            title: ui.meta.title.value,
            published: ui.meta.published.value,
            updated: ui.meta.updated.value,
            description: ui.meta.description.value,
            tags: ui.meta.tags.value,
            category: ui.meta.category.value,
          };
          const body = easyMDE.value();
          const output =
            "---\n" + stringifyMetadata(metadata) + "\n---\n\n" + body;
          console.log("--- 生成的文件内容 ---");
          console.log(output);
          console.log("------------------------------");
          showSaveStatus("内容已输出到开发者控制台。", false);
        }

        async function login() {
          ui.loginError.classList.add("hidden");
          ui.loginSpinner.classList.remove("hidden");
          ui.loginBtn.classList.add("btn-disabled");
          state.user = ui.userInput.value.trim();
          state.repo = ui.repoInput.value.trim();
          state.pat = ui.patInput.value.trim();
          if (!state.user || !state.repo || !state.pat) {
            showLoginError("所有字段均为必填项。");
            ui.loginSpinner.classList.add("hidden");
            ui.loginBtn.classList.remove("btn-disabled");
            return;
          }
          try {
            const files = await getFiles();
            localStorage.setItem(
              "github_editor_data",
              JSON.stringify({
                user: state.user,
                repo: state.repo,
                pat: state.pat,
              })
            );
            ui.loginView.classList.add("hidden");
            ui.mainView.classList.remove("hidden");
            renderFileList(files);
          } catch (error) {
            showLoginError(
              `登录失败: ${error.message}. 请检查您的信息和 PAT 权限。`
            );
          } finally {
            ui.loginSpinner.classList.add("hidden");
            ui.loginBtn.classList.remove("btn-disabled");
          }
        }

        function logout() {
          localStorage.removeItem("github_editor_data");
          state.user = state.repo = state.pat = "";
          resetEditorState();
          ui.mainView.classList.add("hidden");
          ui.loginView.classList.remove("hidden");
          ui.userInput.value = ui.repoInput.value = ui.patInput.value = "";
        }

        // --- URL 参数处理 ---
        function getUrlParams() {
          const urlParams = new URLSearchParams(window.location.search);
          return {
            slug: urlParams.get("slug"),
          };
        }

        async function loadFileBySlug(slug) {
          if (!slug) return;

          try {
            const files = await getFiles();
            const targetFile = files.find((file) => {
              const fileName = file.name.replace(".md", "");
              return fileName === slug;
            });

            if (targetFile) {
              // 模拟点击文件来加载它
              state.currentFile.path = targetFile.path;
              ui.placeholderSection.classList.add("hidden");
              ui.editorSection.classList.remove("hidden");
              ui.currentFileName.textContent = targetFile.name;

              // 在文件列表中高亮选中的文件
              document.querySelectorAll("#file-list a").forEach((el) => {
                el.classList.remove(
                  "bg-[var(--btn-plain-bg-hover)]",
                  "text-[var(--primary)]"
                );
                if (el.dataset.path === targetFile.path) {
                  el.classList.add(
                    "bg-[var(--btn-plain-bg-hover)]",
                    "text-[var(--primary)]"
                  );
                }
              });

              const content = await getFileContent(targetFile.path);
              const { metadata, body } = parseContent(content);
              populateEditor(metadata, body);
              if (!metadata.published) setTodaysDate();

              // 检查并加载草稿
              loadDraft(targetFile.path);

              showSaveStatus(`已自动加载文章: ${targetFile.name}`, false);
            } else {
              showSaveStatus(`未找到文章: ${slug}`, true);
            }
          } catch (error) {
            showSaveStatus(`加载指定文章失败: ${error.message}`, true);
          }
        }

        // --- 初始化 ---
        async function initializeApp() {
          loadInitialTheme();
          easyMDE = new EasyMDE({
            element: document.getElementById("markdown-editor"),
            spellChecker: false,
          });

          // 定期开始自动保存草稿
          if (draftInterval) clearInterval(draftInterval);
          draftInterval = setInterval(saveDraft, 5000); // 每 5 秒保存一次

          // 在离开页面前保存草稿
          window.addEventListener("beforeunload", saveDraft);

          // 事件监听器
          ui.loginBtn.addEventListener("click", login);
          ui.logoutBtn.addEventListener("click", logout);
          ui.fileList.addEventListener("click", handleFileClick);

          ui.testOutputBtn.addEventListener("click", handleTestOutput);
          ui.saveBtn.addEventListener("click", handleSave);

          ui.newFileBtn.addEventListener("click", handleNewFileClick);
          ui.createFileConfirmBtn.addEventListener(
            "click",
            handleCreateNewFile
          );

          // 新增/修改的事件监听器
          ui.deleteFileBtn.addEventListener("click", handleDeleteButtonClick);
          ui.renameFileBtn.addEventListener("click", handleRenameClick);
          ui.renameFileConfirmBtn.addEventListener(
            "click",
            handleRenameConfirm
          );

          ui.themeToggle.addEventListener("click", handleThemeToggle);

          // Modal close buttons
          document
            .getElementById("new-file-cancel-btn")
            ?.addEventListener("click", () => {
              ui.newFileModal.classList.add("hidden");
            });
          document
            .getElementById("rename-file-cancel-btn")
            ?.addEventListener("click", () => {
              ui.renameFileModal.classList.add("hidden");
            });

          // Close modals on background click
          ui.newFileModal?.addEventListener("click", (e) => {
            if (e.target === ui.newFileModal) {
              ui.newFileModal.classList.add("hidden");
            }
          });
          ui.renameFileModal?.addEventListener("click", (e) => {
            if (e.target === ui.renameFileModal) {
              ui.renameFileModal.classList.add("hidden");
            }
          });

          const savedData = localStorage.getItem("github_editor_data");
          if (savedData) {
            const { user, repo, pat } = JSON.parse(savedData);
            ui.userInput.value = user;
            ui.repoInput.value = repo;
            ui.patInput.value = pat;
            await login();

            // 登录成功后检查 URL 参数
            const params = getUrlParams();
            if (params.slug) {
              await loadFileBySlug(params.slug);
            }
          }
        }
        initializeApp();
      });
    </script>
  </body>
</html>
